/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _OAUTH_H_RPCGEN
#define _OAUTH_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


struct authorization_payload {
	char *id;
	int refresh_token;
};
typedef struct authorization_payload authorization_payload;

struct approve_token_payload {
	char *auth_token;
};
typedef struct approve_token_payload approve_token_payload;

struct access_token_response {
	char *resource_token;
	char *refresh_token;
	char *error;
	int valability;
};
typedef struct access_token_response access_token_response;

struct delegated_action_payload {
	char *action;
	char *resource;
	char *access_token;
};
typedef struct delegated_action_payload delegated_action_payload;

struct approve_req_token_response {
	char *auth_token;
	int is_signed;
};
typedef struct approve_req_token_response approve_req_token_response;

struct refresh_token_payload {
	char *refresh_token;
};
typedef struct refresh_token_payload refresh_token_payload;

struct request_access_token_1_argument {
	authorization_payload arg1;
	approve_token_payload arg2;
};
typedef struct request_access_token_1_argument request_access_token_1_argument;

#define OAUTH_PROG 0x12345678
#define OAUTH_VERS 1

#if defined(__STDC__) || defined(__cplusplus)
#define REQUEST_AUTHORIZATION 1
extern  char ** request_authorization_1(authorization_payload , CLIENT *);
extern  char ** request_authorization_1_svc(authorization_payload , struct svc_req *);
#define REQUEST_ACCESS_TOKEN 2
extern  access_token_response * request_access_token_1(authorization_payload , approve_token_payload , CLIENT *);
extern  access_token_response * request_access_token_1_svc(authorization_payload , approve_token_payload , struct svc_req *);
#define VALIDATE_DELEGATED_ACTION 3
extern  char ** validate_delegated_action_1(delegated_action_payload , CLIENT *);
extern  char ** validate_delegated_action_1_svc(delegated_action_payload , struct svc_req *);
#define APPROVE_REQUEST_TOKEN 4
extern  approve_req_token_response * approve_request_token_1(approve_token_payload , CLIENT *);
extern  approve_req_token_response * approve_request_token_1_svc(approve_token_payload , struct svc_req *);
#define REFRESH_TOKEN 5
extern  access_token_response * refresh_token_1(refresh_token_payload , CLIENT *);
extern  access_token_response * refresh_token_1_svc(refresh_token_payload , struct svc_req *);
extern int oauth_prog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define REQUEST_AUTHORIZATION 1
extern  char ** request_authorization_1();
extern  char ** request_authorization_1_svc();
#define REQUEST_ACCESS_TOKEN 2
extern  access_token_response * request_access_token_1();
extern  access_token_response * request_access_token_1_svc();
#define VALIDATE_DELEGATED_ACTION 3
extern  char ** validate_delegated_action_1();
extern  char ** validate_delegated_action_1_svc();
#define APPROVE_REQUEST_TOKEN 4
extern  approve_req_token_response * approve_request_token_1();
extern  approve_req_token_response * approve_request_token_1_svc();
#define REFRESH_TOKEN 5
extern  access_token_response * refresh_token_1();
extern  access_token_response * refresh_token_1_svc();
extern int oauth_prog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_authorization_payload (XDR *, authorization_payload*);
extern  bool_t xdr_approve_token_payload (XDR *, approve_token_payload*);
extern  bool_t xdr_access_token_response (XDR *, access_token_response*);
extern  bool_t xdr_delegated_action_payload (XDR *, delegated_action_payload*);
extern  bool_t xdr_approve_req_token_response (XDR *, approve_req_token_response*);
extern  bool_t xdr_refresh_token_payload (XDR *, refresh_token_payload*);
extern  bool_t xdr_request_access_token_1_argument (XDR *, request_access_token_1_argument*);

#else /* K&R C */
extern bool_t xdr_authorization_payload ();
extern bool_t xdr_approve_token_payload ();
extern bool_t xdr_access_token_response ();
extern bool_t xdr_delegated_action_payload ();
extern bool_t xdr_approve_req_token_response ();
extern bool_t xdr_refresh_token_payload ();
extern bool_t xdr_request_access_token_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_OAUTH_H_RPCGEN */
