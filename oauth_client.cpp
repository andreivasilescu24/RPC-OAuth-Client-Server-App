/*
 * This is sample code generated by rpcgen.
 * These are only templates and you can use them
 * as a guideline for developing your own functions.
 */

#include "oauth.h"
#include <fstream>
#include <string.h>
#include <iostream>

void oauth_prog_1(char *host, char *input_file_name)
{
	CLIENT *clnt;
	char **result_1;
	authorization_payload request_authorization_1_arg1;
	access_token_response *result_2;
	authorization_payload request_access_token_1_arg1;
	// access_token_payload request_access_token_1_arg2;

	clnt = clnt_create(host, OAUTH_PROG, OAUTH_VERS, "udp");
	if (clnt == NULL)
	{
		clnt_pcreateerror(host);
		exit(1);
	}

	std::ifstream input_file(input_file_name);
	std::ofstream output_file("tests_output/test1/client.out");

	char line_c[100];
	std::string line;
	while (std::getline(input_file, line))
	{
		strcpy(line_c, line.c_str());
		int auto_refresh = -1;
		char *resource = new char[16];

		char *p = strtok(line_c, ",");
		char *id = new char[strlen(p) + 1];
		strcpy(id, p);

		p = strtok(NULL, ",");
		char *operation = new char[strlen(p) + 1];
		strcpy(operation, p);

		p = strtok(NULL, ",");
		if (!strcmp(operation, "REQUEST"))
		{
			auto_refresh = atoi(p);

			authorization_payload auth_payload;
			auth_payload.id = (char *)malloc((strlen(id) + 1) * sizeof(char));
			strcpy(auth_payload.id, id);
			auth_payload.refresh_token = auto_refresh;

			char **auth_response = request_authorization_1(auth_payload, clnt);
			if (!strcmp(*auth_response, "USER_NOT_FOUND"))
			{
				output_file << *auth_response << "\n";
			}
			else
			{
				approve_token_payload approval_payload;
				approval_payload.auth_token = new char[16];
				strcpy(approval_payload.auth_token, *auth_response);

				approve_req_token_response *user_approval_response = approve_request_token_1(approval_payload, clnt);

				output_file << user_approval_response->auth_token << " " << user_approval_response->is_signed << "\n";

				access_token_response *access_token_res = request_access_token_1(auth_payload, approval_payload, clnt);
				// if (access_token_res->error == NULL)
				// {
				// 	output_file << "OK\n";
				// }
				// else
				// {
				// 	output_file << "not OK" << "\n";
				// }
				if (access_token_res == NULL)
				{
					output_file << "Failed to get access token response\n";
				}
				// if (access_token_res->error)
				// {
				// 	output_file << access_token_res->error << "\n";
				// }
				// else
				// {
				// 	output_file << *auth_response << " -> " << access_token_res->resource_token << "\n";
				// }
			}
		}
		else
		{
			std::cout << "DELEGATED\n";
			strcpy(resource, p);
		}
	}

	input_file.close();
	output_file.close();
}

int main(int argc, char *argv[])
{
	char *host;

	// FILE *operations_file = fopen(argv[2], "r");

	host = argv[1];
	oauth_prog_1(host, argv[2]);
	exit(0);
}
